R"zzz(#version 400 core
layout (triangles) in;
uniform int num_waves;
uniform float time;
uniform float amp[100];
uniform float freq[100];
uniform float phi[100];
uniform vec3 dir[100];
uniform float steepness;
in vec3 offset[];
out vec3 off;
out vec3 normal;

const float kPi = 3.1415926535897932384626433832795f;

float fade(float t) {
  return 6 * pow(t, 5) - 15 * pow(t, 4) + 10 * pow(t, 3);
}

float random(vec2 co) {
	return fract(sin(dot(co, vec2(12.9898,78.233))) * 43758.5453);
}

vec2 randUnitVec(vec2 xz) {
	float angle = random(xz) * 2 * kPi;
	return normalize(vec2(cos(angle), sin(angle)));
}

float dotGridGradient(int iu, int iv, float u, float v) {
	// Generate seeded random unit gradient vector
	vec2 unit_gradient = randUnitVec(vec2(iu, iv));

	// Compute distance vector
	float du = u - float(iu);
	float dv = v - float(iv);

	// Return dot product
	return (du * unit_gradient[0] + dv * unit_gradient[1]);
}

float perlin(float u, float v) {
	// Get coordinates of unit cell
	int u0 = int(floor(u));
	int u1 = u0 + 1;
	int v0 = int(floor(v));
	int v1 = v0 + 1;

	// Interpolation weights
	float wt_u = fade(u - float(u0));
	float wt_v = fade(v - float(v0));

	// Interpolate between grid point gradients
	float n0, n1, iu0, iu1, value;
	n0 = dotGridGradient(u0, v0, u, v);
	n1 = dotGridGradient(u1, v0, u, v);
	iu0 = mix(n0, n1, wt_u);
	n0 = dotGridGradient(u0, v1, u, v);
	n1 = dotGridGradient(u1, v1, u, v);
	iu1 = mix(n0, n1, wt_u);
	value = mix(iu0, iu1, wt_v);

	return value;
}

// Bilinear interpolation
vec4 interp(in vec4 corner0, in vec4 corner1, in vec4 corner2) {
  return corner0 * gl_TessCoord[0] + corner1 * gl_TessCoord[1] + corner2 * gl_TessCoord[2];
}

// State of a given wave
float calculateWaveHeight(in vec4 location, in float a, in float freq, in float phi, in vec3 direction) {
  return a * sin(dot(direction.xz, location.xz) * freq + time * phi);
}

// Derivative calculation
vec3 calculateXZDeriv(in vec4 location, in float a, in float freq, in float phi, in vec3 direction) {
  vec3 deriv = vec3(0.0f);
  deriv.x -= freq * direction.x * a * cos(dot(direction.xz, location.xz) * freq + time * phi);
  deriv.z -= freq * direction.z * a * cos(dot(direction.xz, location.xz) * freq + time * phi);
  return deriv;
}

// Height function for Gerstner waves, returns contribution in x, y, z dims
vec3 gerstnerHeight(in vec4 loc, in float amp, in float freq, in float phi, in vec3 dir) {
  vec3 part = vec3(0.0f);
  float q = steepness / (freq * amp * num_waves);
  part.xz = q * amp * dir.xz * cos(dot(freq * dir.xz, loc.xz) + phi * time);
  part.y = amp * sin(dot(freq * dir.xz, loc.xz) + phi * time);
  return part;
}

// Normal calculations for Gerstner waves
vec3 gerstnerNormal(in vec3 wave, in float amp, in float freq, in float phi, in vec3 dir) {
  float q = steepness / (freq * amp * num_waves);
  float WA = freq * amp;
  float S = sin(dot(freq * dir, wave) + phi * time);
  float C = cos(dot(freq * dir, wave) + phi * time);
  vec3 normal = vec3(0.0f);
  normal.xz = -(dir.xz * WA * C);
  normal.y = -(q * WA * S);
  return normal;
}

void main() {
  off = offset[0];
  vec4 loc = interp(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position);

  // Gerstner wave calculations
  vec4 wave = vec4(loc.x, 0.0f, loc.z, loc.w);
  for (int i = 0; i < num_waves; i++) {
    wave.xyz += gerstnerHeight(loc, amp[i], freq[i], phi[i], dir[i]);
  }
  vec3 norm = vec3(0.0f, 1.0f, 0.0f);
  for (int i = 0; i < num_waves; i++) {
    norm += gerstnerNormal(wave.xyz, amp[i], freq[i], phi[i], dir[i]);
  }
  norm.y += (perlin(wave.x, wave.z) * 0.8f);
  gl_Position = wave;
  normal = normalize(norm);
}
)zzz"
